# Generated by Django 5.2.6 on 2025-09-27 04:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ideal_soil_type', models.CharField(max_length=100)),
                ('min_temperature_c', models.FloatField()),
                ('max_temperature_c', models.FloatField()),
                ('min_rainfall_mm_per_month', models.FloatField()),
                ('max_rainfall_mm_per_month', models.FloatField()),
                ('duration_days', models.IntegerField(help_text='Approximate duration of crop cycle in days')),
            ],
        ),
        migrations.CreateModel(
            name='MLModelPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(help_text='Name of the ML model', max_length=100)),
                ('model_version', models.CharField(help_text='Model version', max_length=50)),
                ('accuracy', models.FloatField(blank=True, help_text='Model accuracy', null=True)),
                ('precision', models.FloatField(blank=True, help_text='Model precision', null=True)),
                ('recall', models.FloatField(blank=True, help_text='Model recall', null=True)),
                ('f1_score', models.FloatField(blank=True, help_text='Model F1 score', null=True)),
                ('r2_score', models.FloatField(blank=True, help_text='Model R2 score', null=True)),
                ('rmse', models.FloatField(blank=True, help_text='Root Mean Square Error', null=True)),
                ('training_samples', models.IntegerField(help_text='Number of training samples')),
                ('validation_samples', models.IntegerField(help_text='Number of validation samples')),
                ('training_date', models.DateTimeField(help_text='Date when model was trained')),
                ('model_parameters', models.JSONField(help_text='Model hyperparameters')),
                ('feature_importance', models.JSONField(blank=True, help_text='Feature importance scores', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ml_model_performance',
                'ordering': ['-training_date'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('farmer', 'Farmer'), ('admin', 'Admin'), ('officer', 'Officer')], default='farmer', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CropAdvisory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('soil_type', models.CharField(max_length=100)),
                ('weather_condition', models.CharField(max_length=100)),
                ('recommendation', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advisories', to='advisory.crop')),
            ],
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(help_text='Unique user identifier', max_length=100)),
                ('session_id', models.CharField(help_text='Session identifier', max_length=100)),
                ('prediction_type', models.CharField(help_text='Type of prediction (crop_recommendation, yield_prediction, etc.)', max_length=50)),
                ('input_data', models.JSONField(help_text='Input parameters used for prediction')),
                ('system_prediction', models.JSONField(help_text="System's prediction")),
                ('actual_result', models.JSONField(help_text="Actual result or user's feedback")),
                ('feedback_rating', models.IntegerField(help_text='User rating from 1-5')),
                ('feedback_text', models.TextField(blank=True, help_text='Additional user comments', null=True)),
                ('latitude', models.FloatField(blank=True, help_text="User's latitude", null=True)),
                ('longitude', models.FloatField(blank=True, help_text="User's longitude", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'user_feedback',
                'indexes': [models.Index(fields=['user_id', 'created_at'], name='user_feedba_user_id_720700_idx'), models.Index(fields=['prediction_type', 'created_at'], name='user_feedba_predict_ffd9af_idx'), models.Index(fields=['feedback_rating', 'created_at'], name='user_feedba_feedbac_d8bfa3_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(help_text='Unique user identifier', max_length=100)),
                ('session_id', models.CharField(help_text='Unique session identifier', max_length=100, unique=True)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('total_interactions', models.IntegerField(default=0)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('location_name', models.CharField(blank=True, max_length=200, null=True)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('device_type', models.CharField(blank=True, max_length=50, null=True)),
                ('session_summary', models.JSONField(blank=True, help_text='Summary of session interactions', null=True)),
            ],
            options={
                'db_table': 'user_sessions',
                'indexes': [models.Index(fields=['user_id', 'start_time'], name='user_sessio_user_id_c66047_idx'), models.Index(fields=['session_id'], name='user_sessio_session_e62ba3_idx')],
            },
        ),
    ]
