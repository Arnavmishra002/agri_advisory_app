#!/usr/bin/env python3
"""
General APIs Service for Non-Agricultural Questions
Integrates free APIs for handling general questions
"""

import requests
import json
import random
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class GeneralAPIsService:
    """Service for handling general questions using free APIs"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'KrisiMitra-AI-Assistant/1.0'
        })
        
        # API configurations
        self.huggingface_token = None  # Set your token if you have one
        self.openai_token = None  # Set your token if you have one
        
    def handle_general_question(self, query: str, language: str = 'en') -> Dict[str, Any]:
        """Handle general questions using various free APIs"""
        try:
            query_lower = query.lower().strip()
            
            # Try different APIs based on query type
            if any(word in query_lower for word in ['trivia', 'quiz', 'question', 'random fact']):
                return self._handle_trivia_request(query, language)
            
            elif any(word in query_lower for word in ['number', 'date', 'year', 'fact']):
                return self._handle_numbers_api(query, language)
            
            elif any(word in query_lower for word in ['what is', 'who is', 'when was', 'where is', 'why', 'how']):
                return self._handle_wikipedia_search(query, language)
            
            elif any(word in query_lower for word in ['bored', 'activity', 'fun', 'entertainment']):
                return self._handle_bored_api(query, language)
            
            else:
                # Try general AI response
                return self._handle_ai_response(query, language)
        except Exception as e:
            logger.error(f"General APIs service error: {e}")
            return self._get_fallback_response(query, language)
    
    def _handle_ai_response(self, query: str, language: str) -> Dict[str, Any]:
        """Handle general AI response fallback"""
        if language == 'hi':
            return {
                "response": f"рдореИрдВ рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди '{query}' рдХреЛ рд╕рдордЭрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░ рд░рд╣рд╛ рд╣реВрдВ, рд▓реЗрдХрд┐рди рдореБрдЭреЗ рдЗрд╕рдХреА рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд╣реИред\n\nрдореИрдВ рдПрдХ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВ рдФрд░ рдореБрдЦреНрдп рд░реВрдк рд╕реЗ рдЦреЗрддреА, рдлрд╕рд▓, рдореМрд╕рдо, рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдФрд░ рдХреГрд╖рд┐ рд╕реЗ рдЬреБрдбрд╝реЗ рд╕рд╡рд╛рд▓реЛрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред\n\nрдХреНрдпрд╛ рдЖрдк рдХреЛрдИ рдХреГрд╖рд┐ рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрди рдкреВрдЫрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
                "source": "fallback",
                "confidence": 0.30,
                "language": language
            }
        else:
            return {
                "response": f"I'm trying to understand your question '{query}', but I don't have information about that.\n\nI'm an agricultural assistant and mainly help with farming, crops, weather, market prices, and agricultural questions.\n\nWould you like to ask any agricultural-related questions?",
                "source": "fallback",
                "confidence": 0.30,
                "language": language
            }
    
    def _handle_trivia_request(self, query: str, language: str) -> Dict[str, Any]:
        """Handle trivia questions using Open Trivia Database"""
        try:
            # Get random trivia question
            response = self.session.get('https://opentdb.com/api.php?amount=1&type=multiple', timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                if data['results']:
                    question_data = data['results'][0]
                    
                    if language == 'hi':
                        return {
                            "response": f"ЁЯОп **рд╕рд╛рдорд╛рдиреНрдп рдЬреНрдЮрд╛рди рдкреНрд░рд╢реНрди:**\n\nтЭУ {question_data['question']}\n\nЁЯУЭ рд╡рд┐рдХрд▓реНрдк:\nтАв {question_data['correct_answer']}\nтАв {question_data['incorrect_answers'][0]}\nтАв {question_data['incorrect_answers'][1]}\nтАв {question_data['incorrect_answers'][2]}\n\nЁЯТб рд╕рд╣реА рдЙрддреНрддрд░: {question_data['correct_answer']}\n\nЁЯП╖я╕П рд╢реНрд░реЗрдгреА: {question_data['category']} | ЁЯФе рдХрдард┐рдирд╛рдИ: {question_data['difficulty']}",
                            "source": "opentdb",
                            "confidence": 0.9,
                            "language": language
                        }
                    else:
                        return {
                            "response": f"ЁЯОп **Trivia Question:**\n\nтЭУ {question_data['question']}\n\nЁЯУЭ Options:\nтАв {question_data['correct_answer']}\nтАв {question_data['incorrect_answers'][0]}\nтАв {question_data['incorrect_answers'][1]}\nтАв {question_data['incorrect_answers'][2]}\n\nЁЯТб Correct Answer: {question_data['correct_answer']}\n\nЁЯП╖я╕П Category: {question_data['category']} | ЁЯФе Difficulty: {question_data['difficulty']}",
                            "source": "opentdb",
                            "confidence": 0.9,
                            "language": language
                        }
        except Exception as e:
            logger.error(f"Trivia API error: {e}")
            return self._get_fallback_response(query, language)
    
    def _handle_numbers_api(self, query: str, language: str) -> Dict[str, Any]:
        """Handle number-related questions using Numbers API"""
        try:
            # Try to extract number from query
            import re
            numbers = re.findall(r'\d+', query)
            
            if numbers:
                number = numbers[0]
                response = self.session.get(f'http://numbersapi.com/{number}', timeout=5)
                
                if response.status_code == 200:
                    fact = response.text
                    
                    if language == 'hi':
                        return {
                            "response": f"ЁЯФв **рд╕рдВрдЦреНрдпрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд░реЛрдЪрдХ рддрдереНрдп:**\n\nЁЯУК рд╕рдВрдЦреНрдпрд╛: {number}\n\nЁЯТб рддрдереНрдп: {fact}\n\nЁЯМР рд╕реНрд░реЛрдд: Numbers API",
                            "source": "numbers_api",
                            "confidence": 0.8,
                            "language": language
                        }
                    else:
                        return {
                            "response": f"ЁЯФв **Interesting Number Fact:**\n\nЁЯУК Number: {number}\n\nЁЯТб Fact: {fact}\n\nЁЯМР Source: Numbers API",
                            "source": "numbers_api",
                            "confidence": 0.8,
                            "language": language
                        }
            else:
                # Get random number fact
                response = self.session.get('http://numbersapi.com/random/trivia', timeout=5)
                
                if response.status_code == 200:
                    fact = response.text
                    
                    if language == 'hi':
                        return {
                            "response": f"ЁЯФв **рдпрд╛рджреГрдЪреНрдЫрд┐рдХ рд╕рдВрдЦреНрдпрд╛ рддрдереНрдп:**\n\nЁЯТб {fact}\n\nЁЯМР рд╕реНрд░реЛрдд: Numbers API",
                            "source": "numbers_api",
                            "confidence": 0.8,
                            "language": language
                        }
                    else:
                        return {
                            "response": f"ЁЯФв **Random Number Fact:**\n\nЁЯТб {fact}\n\nЁЯМР Source: Numbers API",
                            "source": "numbers_api",
                            "confidence": 0.8,
                            "language": language
                        }
        except Exception as e:
            logger.error(f"Numbers API error: {e}")
            return self._get_fallback_response(query, language)
    
    def _handle_wikipedia_search(self, query: str, language: str) -> Dict[str, Any]:
        """Handle general knowledge questions using Wikipedia API"""
        try:
            # Clean query for Wikipedia search
            search_query = query.replace('what is', '').replace('who is', '').replace('when was', '').replace('where is', '').strip()
            
            # Search Wikipedia
            search_url = f"https://en.wikipedia.org/api/rest_v1/page/summary/{search_query.replace(' ', '_')}"
            response = self.session.get(search_url, timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                
                if 'extract' in data and data['extract']:
                    summary = data['extract'][:500] + "..." if len(data['extract']) > 500 else data['extract']
                    
                    if language == 'hi':
                        return {
                            "response": f"ЁЯУЪ **рд╕рд╛рдорд╛рдиреНрдп рдЬреНрдЮрд╛рди:**\n\nЁЯФН **{data.get('title', search_query)}**\n\nЁЯУЭ рдЬрд╛рдирдХрд╛рд░реА: {summary}\n\nЁЯМР рд╕реНрд░реЛрдд: Wikipedia",
                            "source": "wikipedia",
                            "confidence": 0.7,
                            "language": language
                        }
                    else:
                        return {
                            "response": f"ЁЯУЪ **General Knowledge:**\n\nЁЯФН **{data.get('title', search_query)}**\n\nЁЯУЭ Information: {summary}\n\nЁЯМР Source: Wikipedia",
                            "source": "wikipedia",
                            "confidence": 0.7,
                            "language": language
                        }
        except Exception as e:
            logger.error(f"Wikipedia API error: {e}")
            return self._get_fallback_response(query, language)
    
    def _handle_bored_api(self, query: str, language: str) -> Dict[str, Any]:
        """Handle boredom-related queries using Bored API"""
        try:
            response = self.session.get('https://www.boredapi.com/api/activity', timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                activity = data.get('activity', '')
                activity_type = data.get('type', '')
                participants = data.get('participants', 1)
                
                if language == 'hi':
                    return {
                        "response": f"ЁЯО▓ **рдордиреЛрд░рдВрдЬрди рд╕реБрдЭрд╛рд╡:**\n\nЁЯОп рдЧрддрд┐рд╡рд┐рдзрд┐: {activity}\n\nЁЯСе рднрд╛рдЧреАрджрд╛рд░: {participants} рд╡реНрдпрдХреНрддрд┐\n\nЁЯП╖я╕П рдкреНрд░рдХрд╛рд░: {activity_type.title()}\n\nЁЯМР рд╕реНрд░реЛрдд: Bored API",
                        "source": "bored_api",
                        "confidence": 0.8,
                        "language": language
                    }
                else:
                    return {
                        "response": f"ЁЯО▓ **Entertainment Suggestion:**\n\nЁЯОп Activity: {activity}\n\nЁЯСе Participants: {participants} person(s)\n\nЁЯП╖я╕П Type: {activity_type.title()}\n\nЁЯМР Source: Bored API",
                        "source": "bored_api",
                        "confidence": 0.8,
                        "language": language
                    }
        except Exception as e:
            logger.error(f"Bored API error: {e}")
            return self._get_fallback_response(query, language)
    
    def _handle_ai_response(self, query: str, language: str) -> Dict[str, Any]:
        """Handle general questions using AI APIs"""
        
        # Try Hugging Face first (free tier)
        if self.huggingface_token:
            try:
                return self._handle_huggingface_api(query, language)
            except Exception as e:
                logger.error(f"Hugging Face API error: {e}")
        
        # Fallback to simple response
        return self._get_fallback_response(query, language)
    
    def _handle_huggingface_api(self, query: str, language: str) -> Dict[str, Any]:
        """Handle questions using Hugging Face Inference API"""
        try:
            headers = {
                'Authorization': f'Bearer {self.huggingface_token}',
                'Content-Type': 'application/json'
            }
            
            # Use a simple text generation model
            payload = {
                "inputs": f"Question: {query}\nAnswer:",
                "parameters": {
                    "max_length": 150,
                    "temperature": 0.7
                }
            }
            
            response = self.session.post(
                'https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium',
                headers=headers,
                json=payload,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data and len(data) > 0:
                    answer = data[0].get('generated_text', '').replace(f"Question: {query}\nAnswer:", '').strip()
                    
                    if language == 'hi':
                        return {
                            "response": f"ЁЯдЦ **AI рдЙрддреНрддрд░:**\n\nтЭУ рдкреНрд░рд╢реНрди: {query}\n\nЁЯТб рдЙрддреНрддрд░: {answer}\n\nЁЯМР рд╕реНрд░реЛрдд: Hugging Face AI",
                            "source": "huggingface",
                            "confidence": 0.6,
                            "language": language
                        }
                    else:
                        return {
                            "response": f"ЁЯдЦ **AI Answer:**\n\nтЭУ Question: {query}\n\nЁЯТб Answer: {answer}\n\nЁЯМР Source: Hugging Face AI",
                            "source": "huggingface",
                            "confidence": 0.6,
                            "language": language
                        }
        except Exception as e:
            logger.error(f"Hugging Face API error: {e}")
            return self._get_fallback_response(query, language)
    
    def _get_fallback_response(self, query: str, language: str) -> Dict[str, Any]:
        """Fallback response when APIs fail"""
        if language == 'hi':
            return {
                "response": f"рдореИрдВ рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди '{query}' рдХреЛ рд╕рдордЭрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░ рд░рд╣рд╛ рд╣реВрдВ, рд▓реЗрдХрд┐рди рдореБрдЭреЗ рдЗрд╕рдХреА рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд╣реИред\n\nрдореИрдВ рдПрдХ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВ рдФрд░ рдореБрдЦреНрдп рд░реВрдк рд╕реЗ рдЦреЗрддреА, рдлрд╕рд▓, рдореМрд╕рдо, рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдФрд░ рдХреГрд╖рд┐ рд╕реЗ рдЬреБрдбрд╝реЗ рд╕рд╡рд╛рд▓реЛрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред\n\nрдХреНрдпрд╛ рдЖрдк рдХреЛрдИ рдХреГрд╖рд┐ рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрди рдкреВрдЫрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
                "source": "fallback",
                "confidence": 0.3,
                "language": language
            }
        else:
            return {
                "response": f"I'm trying to understand your question '{query}', but I don't have information about that.\n\nI'm an agricultural assistant and mainly help with farming, crops, weather, market prices, and agricultural questions.\n\nWould you like to ask any agricultural-related questions?",
                "source": "fallback",
                "confidence": 0.3,
                "language": language
            }

# Create global instance
general_apis_service = GeneralAPIsService()
