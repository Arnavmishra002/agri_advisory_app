"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

# Import sentry_sdk for error monitoring
try:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
except ImportError:
    sentry_sdk = None
    DjangoIntegration = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-3^7he##1_fnu8)9z1nm)^)mzwl%74q8go9x6h4l0=$#am8si%6')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'  # Set to True for testing

# Allow local development hosts and production hosts
ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '.onrender.com',  # Render.com domain
    '.railway.app',   # Railway.app domain
    '.herokuapp.com', # Heroku domain
    '*',  # Allow all hosts for easy deployment (remove in production)
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'advisory',  # Register the advisory app
    'rest_framework', # Register Django REST Framework
    'drf_spectacular', # Register drf-spectacular
    'corsheaders', # Add corsheaders
    'rest_framework_simplejwt', # Add simple JWT
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Add CorsMiddleware
    'advisory.middleware.rate_limiting.UserRateLimitMiddleware',  # User rate limiting
    'advisory.middleware.rate_limiting.IPWhitelistMiddleware',    # IP whitelist
    'advisory.middleware.rate_limiting.RateLimitMiddleware',      # Rate limiting
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'core' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration for production
import dj_database_url

DATABASES = {
    'default': dj_database_url.parse(
        os.environ.get('DATABASE_URL', 'sqlite:///db.sqlite3')
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Encoding settings for proper Unicode support
DEFAULT_CHARSET = 'utf-8'
FILE_CHARSET = 'utf-8'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

# DRF Spectacular settings for faster Swagger UI loading
SPECTACULAR_SETTINGS = {
    'TITLE': 'Krishimitra Agri-Advisory API',
    'DESCRIPTION': 'Enhanced Agricultural Chatbot with ChatGPT-like capabilities and 25+ language support',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': False,  # Simplified for faster generation
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'displayRequestDuration': True,
        'docExpansion': 'none',
        'filter': True,
        'showExtensions': False,
        'showCommonExtensions': False,
        'tryItOutEnabled': True,
    },
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'SORT_OPERATIONS': False,  # Don't sort operations for faster generation
    'COMPONENT_SPLIT_PATCH': True,
    'COMPONENT_SPLIT_POST': True,
    'ENUM_ADD_EXPLICIT_BLANK_NULL_CHOICE': False,
    'ENUM_GENERATE_CHOICE_DESCRIPTION': False,
    'GENERIC_ADDITIONAL_PROPERTIES': 'bool',
    'SERVE_URLCONF': None,
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    'SERVE_AUTHENTICATION': None,
    'SERVE_INCLUDE_SCHEMA': False,
    'SERVE_FAVICON': None,
    'SERVE_CDN': 'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0',
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': False,
        'displayRequestDuration': True,
        'docExpansion': 'none',  # Start with collapsed sections
        'filter': True,
        'showExtensions': False,
        'showCommonExtensions': False,
        'tryItOutEnabled': True,
        'requestSnippetsEnabled': True,
        'requestSnippets': {
            'generators': {
                'curl_bash': {
                    'title': 'cURL (bash)',
                    'syntax': 'bash'
                },
                'curl_powershell': {
                    'title': 'cURL (PowerShell)',
                    'syntax': 'powershell'
                },
                'curl_cmd': {
                    'title': 'cURL (CMD)',
                    'syntax': 'bash'
                }
            }
        }
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': True,
        'hideHostname': False,
        'hideLoading': True,
        'nativeScrollbars': True,
        'pathInMiddlePanel': True,
        'requiredPropsFirst': True,
        'sortPropsAlphabetically': False,
        'theme': {
            'colors': {
                'primary': {
                    'main': '#32329f'
                }
            }
        }
    }
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

AUTH_USER_MODEL = 'advisory.User'

# Celery Configuration - Temporarily disabled for testing
# CELERY_BROKER_URL = 'redis://localhost:6379/0' # Using Redis as the message broker
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0' # Storing results in Redis
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Kolkata' # Or your appropriate timezone
# CELERY_BEAT_SCHEDULE = {
#     'update-weather-every-hour': {
#         'task': 'advisory.tasks.update_weather_data',
#         'schedule': timedelta(hours=1),
#     },
#     'update-market-data-daily': {
#         'task': 'advisory.tasks.update_market_data',
#         'schedule': timedelta(days=1),
#     },
# }

# Caching settings (using local-memory cache for development, consider Redis for production)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300, # Cache timeout in seconds (5 minutes)
        'OPTIONS': {
            'MAX_ENTRIES': 1000
        }
    },
    'weather_cache': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'weather-cache',
        'TIMEOUT': 60 * 60, # 1 hour
        'OPTIONS': {
            'MAX_ENTRIES': 500
        }
    },
    'market_cache': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'market-cache',
        'TIMEOUT': 60 * 60 * 24, # 24 hours
        'OPTIONS': {
            'MAX_ENTRIES': 1000
        }
    },
    'schema_cache': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'schema-cache',
        'TIMEOUT': 60 * 60 * 24, # 24 hours - cache schema for a day
        'OPTIONS': {
            'MAX_ENTRIES': 10
        }
    }
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", # Allow React frontend
    "http://127.0.0.1:3000",
]

# Weather API Configuration
WEATHER_API_KEY = "YOUR_WEATHER_API_KEY"
WEATHER_API_BASE_URL = "https://api.weatherapi.com/v1"

# Rate Limiting Configuration
RATE_LIMIT_WHITELIST = [
    '127.0.0.1',
    '::1',
    'localhost'
]

RATE_LIMIT_WHITELIST_NETWORKS = [
    '10.0.0.0/8',
    '172.16.0.0/12',
    '192.168.0.0/16'
]

# Performance Monitoring Configuration
PERFORMANCE_MONITORING = {
    'ENABLED': True,
    'ALERT_THRESHOLDS': {
        'response_time_ms': 2000,
        'cpu_percent': 80,
        'memory_percent': 85,
        'error_rate_percent': 5
    },
    'METRICS_RETENTION_DAYS': {
        'api_metrics': 7,
        'system_metrics': 1,
        'user_metrics': 30
    }
}

# Sentry Configuration
SENTRY_DSN = os.environ.get('SENTRY_DSN')

if SENTRY_DSN and sentry_sdk and DjangoIntegration:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
        ],
        # Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,
        # If you are using more than one Django project in a single Python process,
        # or if you are running your Django project as a sub-application of a larger Python application,
        # you may need to configure the following to avoid issues:
        # `request_bodies='always'` to capture full request bodies for errors.
        # `send_default_pii=True` to send personally identifiable information (e.g., usernames).
        # `environment=os.environ.get('SENTRY_ENVIRONMENT', 'development')`
        # `server_name=os.environ.get('SENTRY_SERVER_NAME', 'django-app')`
    )

# Static files configuration for production
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True